/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    //  flavor = "tap-unless-interrupted";
    // tapping_term_ms = <50>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
          &kp Q   &kp W   &kp E      &kp R       &kp T        &kp Y    &kp U      &kp I    &kp O                &kp P
     &mt LCMD A   &kp S   &kp D    &lt 4 F       &kp G        &kp H  &lt 4 J      &kp K    &kp L        &mt RCMD APOS
 &mt LEFT_ALT Z   &kp X   &kp C      &kp V       &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &mt RIGHT_ALT SLASH
                                 &sk LSHFT  &lt 1 BSPC  &lt 2 SPACE    &mo 3
            >;
        };

        left_layer {
            bindings = <
        &kp KP_DIVIDE  &kp N7  &kp N8  &kp N9  &kp KP_MINUS  &kp LC(LG(S))     &none  &kp UP_ARROW       &none   &none
 &mt LCMD KP_MULTIPLY  &kp N4  &kp N5  &kp N6   &kp KP_PLUS          &none  &kp LEFT      &kp DOWN   &kp RIGHT   &none
         &kp NUMBER_0  &kp N1  &kp N2  &kp N3     &kp EQUAL          &none     &none     &kp COMMA  &kp K_STOP   &none
                                        &none      &kp BSPC      &kp SPACE     &none
            >;
        };

        right_layer {
            bindings = <
 &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACE  &kp RIGHT_BRACE     &none      &none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
      &kp EXCL            &kp AT        &kp HASH       &kp DOLLAR     &none      &none       &kp PERCENT          &kp CARET         &kp AMPERSAND              &kp ASTRK
     &kp GRAVE         &kp TILDE           &none        &kp UNDER     &none      &none         &kp COLON           &kp SEMI              &kp PIPE               &kp BSLH
                                                        &sk LSHFT  &kp BSPC  &kp SPACE             &none
            >;
        };

        tri_layer {
            bindings = <
          &kp F9  &kp F10  &kp F11         &kp F12  &kp NUM_5     &trans           &none    &kp UP_ARROW            &none  &bt BT_CLR
 &mt LEFT_GUI F5   &kp F6   &kp F7          &kp F8      &none     &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW      &trans
 &mt LEFT_ALT F1   &kp F2   &kp F3          &kp F4      &none     &trans           &none           &none           &trans      &trans
                                    &sk LEFT_SHIFT   &kp BSPC  &kp SPACE          &trans
            >;
        };

        cmd_layer {
            bindings = <
 &kp ESC  &trans    &trans    &trans     &trans  &trans  &trans  &trans  &trans    &kp DEL
 &kp TAB   &none  &kp LALT    &trans     &trans  &trans  &trans  &trans  &trans  &kp ENTER
  &trans  &trans    &trans    &trans     &trans  &trans  &trans  &trans  &trans     &trans
                            &kp LCMD  &kp ENTER  &trans  &trans
            >;
        };
    };
};
